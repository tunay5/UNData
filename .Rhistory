devtools::load_all(".")
library(UN)
?get_data
devtools::load_all(".")
library(UN)
?get_data
devtools::load_all(".")
devtools::load_all(".")
library(UN)
?get_data
devtools::load_all(".")
library(UN)
?get_data
devtools::load_all(".")
library(UN)
?get_data
?data_structure
devtools::load_all(".")
?data_flow
library(UN)
?get_data
?data_structure
?data_flow
load("~/r_package/UN/R/.RData")
load("~/r_package/UN/R/.RData")
remove.packages("coicopproj")
library(devtools)
install_github("tunay5/COICOP")
library(UN)
data_flow("DF_UNDATA_ENERGY")
data_flow()
data_structure("DF_UNDATA_ENERGY")
View(list_DF_UNDATA_ENERGY)
data_flow()
data_structure("NA_SEC")
data_structure("NASEC_IDCFINA_A")
View(list_NASEC_IDCFINA_A)
data_flow()
View(list_NASEC_IDCFINA_A)
url <- "https://data.un.org/ws/rest/datastructure/UNSD/DSD_GHG_UNDATA/?references=children"
page <- xml2::read_xml(url)
xml2::xml_find_all(page, "//structure:Dimension")
xml2::xml_attr(xml2::xml_find_all(page, "//structure:Dimension"),"id")
xml2::xml_attr(xml2::xml_find_all(xml2::xml_find_all(page, "//structure:DataStructureComponents"), "//structure:Dimension"),"id")
names_data <- paste0("CL_FREQ")
alt_pos <- stringr::str_locate_all(names_data, "_")[[1]]
alt_pos_first <- alt_pos[1,]
stringr::str_sub(names_data, alt_pos_first[1],alt_pos_first[2]) <- ","
names_data <- gsub(".*,","", names_data)
names_data
names_data %in% c("FREQ","SAD")
#' Get the Data Structure of a Selected Dataflow
#' @description Returns a structure of the selected dataflow.
#' @return
#' @export
#' @details This function will return in a list format which includes all variables (criteria) in selected dataflow. Dataflow ids can be found in data frame that \code{data_flow()} returns.
#' @param dataflow
#' @examples data_structure(dataflow = "DF_UNData_UNFCC")
data_structure <- function(dataflow){
data <- data_flow() |> dplyr::filter(ids == dataflow)
ref_id <- data[1,3]
agency_id <- data[1,4]
url <- paste0("https://data.un.org/ws/rest/datastructure/",agency_id,"/",ref_id,"/?references=children")
page <- xml2::read_xml(url)
codelist <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:Codelist"),"id")
base_names <- xml2::xml_attr(xml2::xml_find_all(xml2::xml_find_all(page, "//structure:DataStructureComponents"), "//structure:Dimension"),"id")
list_1 <- list()
for(i in 1:length(codelist)){
names_data <- paste0("CL_FREQ")
alt_pos <- stringr::str_locate_all(names_data, "_")[[1]]
alt_pos_first <- alt_pos[1,]
stringr::str_sub(names_data, alt_pos_first[1],alt_pos_first[2]) <- ","
names_data <- gsub(".*,","", names_data)
if(names_data %in% base_names){
as <- paste0(paste("//*[@id = '", name, "'", sep = ""),"]")
data <- data.frame(title = xml2::xml_text(xml2::xml_children(xml2::xml_find_all(page,as))),
id = xml2::xml_attr(xml2::xml_children(xml2::xml_find_all(page, as)),"id"))
data <- data |> tidyr::drop_na()
list_1[[i]] <- data
names(list_1)[i] <- intersect(names_data, base_names)
}else{
break
}
}
assign(paste0("list_", dataflow), list_1, env = .GlobalEnv)
list_1
}
data_structure("SEEANRG")
#' Get the Data Structure of a Selected Dataflow
#' @description Returns a structure of the selected dataflow.
#' @return
#' @export
#' @details This function will return in a list format which includes all variables (criteria) in selected dataflow. Dataflow ids can be found in data frame that \code{data_flow()} returns.
#' @param dataflow
#' @examples data_structure(dataflow = "DF_UNData_UNFCC")
data_structure <- function(dataflow){
data <- data_flow() |> dplyr::filter(ids == dataflow)
ref_id <- data[1,3]
agency_id <- data[1,4]
url <- paste0("https://data.un.org/ws/rest/datastructure/",agency_id,"/",ref_id,"/?references=children")
page <- xml2::read_xml(url)
codelist <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:Codelist"),"id")
base_names <- xml2::xml_attr(xml2::xml_find_all(xml2::xml_find_all(page, "//structure:DataStructureComponents"), "//structure:Dimension"),"id")
list_1 <- list()
for(i in 1:length(codelist)){
name <- codelist[i]
names_data <- paste0("CL_FREQ")
alt_pos <- stringr::str_locate_all(names_data, "_")[[1]]
alt_pos_first <- alt_pos[1,]
stringr::str_sub(names_data, alt_pos_first[1],alt_pos_first[2]) <- ","
names_data <- gsub(".*,","", names_data)
if(names_data %in% base_names){
as <- paste0(paste("//*[@id = '", name, "'", sep = ""),"]")
data <- data.frame(title = xml2::xml_text(xml2::xml_children(xml2::xml_find_all(page,as))),
id = xml2::xml_attr(xml2::xml_children(xml2::xml_find_all(page, as)),"id"))
data <- data |> tidyr::drop_na()
list_1[[i]] <- data
names(list_1)[i] <- intersect(names_data, base_names)
}else{
break
}
}
assign(paste0("list_", dataflow), list_1, env = .GlobalEnv)
list_1
}
data_structure("SEEANRG")
View(list_SEEANRG)
#' Get the Data Structure of a Selected Dataflow
#' @description Returns a structure of the selected dataflow.
#' @return
#' @export
#' @details This function will return in a list format which includes all variables (criteria) in selected dataflow. Dataflow ids can be found in data frame that \code{data_flow()} returns.
#' @param dataflow
#' @examples data_structure(dataflow = "DF_UNData_UNFCC")
data_structure <- function(dataflow){
data <- data_flow() |> dplyr::filter(ids == dataflow)
ref_id <- data[1,3]
agency_id <- data[1,4]
url <- paste0("https://data.un.org/ws/rest/datastructure/",agency_id,"/",ref_id,"/?references=children")
page <- xml2::read_xml(url)
codelist <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:Codelist"),"id")
base_names <- xml2::xml_attr(xml2::xml_find_all(xml2::xml_find_all(page, "//structure:DataStructureComponents"), "//structure:Dimension"),"id")
list_1 <- list()
for(i in 1:length(codelist)){
name <- codelist[i]
names_data <- paste0(codelist[i])
alt_pos <- stringr::str_locate_all(names_data, "_")[[1]]
alt_pos_first <- alt_pos[1,]
stringr::str_sub(names_data, alt_pos_first[1],alt_pos_first[2]) <- ","
names_data <- gsub(".*,","", names_data)
if(names_data %in% base_names){
as <- paste0(paste("//*[@id = '", name, "'", sep = ""),"]")
data <- data.frame(title = xml2::xml_text(xml2::xml_children(xml2::xml_find_all(page,as))),
id = xml2::xml_attr(xml2::xml_children(xml2::xml_find_all(page, as)),"id"))
data <- data |> tidyr::drop_na()
list_1[[i]] <- data
names(list_1)[i] <- intersect(names_data, base_names)
}else{
break
}
}
assign(paste0("list_", dataflow), list_1, env = .GlobalEnv)
list_1
}
data_structure("SEEANRG")
data_flow()
url <- "https://data.un.org/ws/rest/datastructure/ESTAT/SEEANRG/?references=children"
page <- xml2::read_xml(url)
xml2::xml_attr(xml2::xml_find_all(page, "//structure:Codelist"),"id")
rm(data_structure())
rm(data_structure
rm(data_structure)
rm(data_structure)
data_structure("DF_UNDATA_COUNTRYDATA")
View(list_DF_UNDATA_COUNTRYDATA)
data_flow()
data_structure("DF_UNDATA_ENERGY")
View(list_DF_UNDATA_ENERGY)
?UN
?get_data
get_data("DF_UNData_UNFCC", filter = list(c("REF_AREA","DEU"),c("INDICATOR", "EN_ATM_METH_XLULUCF")), start = 2010, end = 2015)
View(list_DF_UNData_UNFCC)
data_flow()
xml2::xml_attr(xml2::xml_find_all(xml2::xml_find_all(page, "//structure:Enumeration"),"//Ref"),"id")
xml2::xml_attr(xml2::xml_children(xml2::xml_find_all(page, "//structure:Enumeration")),"id")
url <- "https://data.un.org/ws/rest/datastructure/ESTAT/SEEANRG/?references=children"
page <- xml2::read_xml(url)
xml2::xml_attr(xml2::xml_find_all(xml2::xml_find_all(page, "//structure:Enumeration"),"//Ref"),"id")
https://data.un.org/ws/rest/datastructure/ESTAT/SEEANRG/?references=children
xml2::xml_attr(xml2::xml_children(xml2::xml_find_all(page, "//structure:Enumeration")),"id")
xml2::xml_attr(xml2::xml_children(xml2::xml_find_all(xml_find_all(page,"//structure:DimensionList"), "//structure:Enumeration")),"id")
xml2::xml_attr(xml2::xml_children(xml2::xml_find_all(xml2::xml_find_all(page,"//structure:DimensionList"), "//structure:Enumeration")),"id")
xml2::xml_attr(xml2::xml_find_all(xml2::xml_children(xml2::xml_find_all(page, "//structure:DimensionList")),"//structure:Enumeration"),"id")
xml2::xml_attr(xml2::xml_find_all(xml2::xml_find_all(xml2::xml_children(xml2::xml_find_all(page, "//structure:DimensionList")),"//structure:Enumeration"),"//Ref"),"id")
dim <- xml2::xml_find_all(page, "//structure:DimensionList")
xml2::xml_find_all(dim, "//structure:Enumeration")
dim
xml2::xml_children(dim)
child <- xml2::xml_children(dim)
xml2::xml_find_all(child , "//structure:Enumeration")
child
dim
xml2::xml_find_all(child , "//structure:Enumeration")
child
xml2::xml_find_chr(child , "//structure:Enumeration")
xml2::xml_find_first(child , "//structure:Enumeration")
xml2::xml_find_all(dim , "//structure:Enumeration")
xml2::xml_child(page, "//structure:DimensionList")
xml2::xml_child(xml2::xml_find_all(page,structure:DimensionList))
xml2::xml_child(xml2::xml_find_all(page,"//structure:DimensionList"))
xml2::xml_findall(xml2::xml_child(xml2::xml_find_all(page,"//structure:DimensionList")),"//structure:Enumeration")
xml2::xml_finda_ll(xml2::xml_child(xml2::xml_find_all(page,"//structure:DimensionList")),"//structure:Enumeration")
xml2::xml_find_all(xml2::xml_child(xml2::xml_find_all(page,"//structure:DimensionList")),"//structure:Enumeration")
xml2::xml_find_all(page, "//structure:DimensionList/structure:Enumeration")
xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension")
xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension/structure:LocalRepresentation")
xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension/structure:LocalRepresentation/structure:Enumeration")
xml2::xml_attr(xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension/structure:LocalRepresentation/structure:Enumeration"),"id")
xml2::xml_attr(xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension/structure:LocalRepresentation/structure:Enumeration/Ref"),"id")
xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension")
xml2::xml_attr(xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension"),"id")
#' Get the Data Structure of a Selected Dataflow
#' @description Returns a structure of the selected dataflow.
#' @return
#' @export
#' @details This function will return in a list format which includes all variables (criteria) in selected dataflow. Dataflow ids can be found in data frame that \code{data_flow()} returns.
#' @param dataflow
#' @examples data_structure(dataflow = "DF_UNData_UNFCC")
data_structure <- function(dataflow){
data <- data_flow() |> dplyr::filter(ids == dataflow)
ref_id <- data[1,3]
agency_id <- data[1,4]
url <- paste0("https://data.un.org/ws/rest/datastructure/",agency_id,"/",ref_id,"/?references=children")
page <- xml2::read_xml(url)
codelist <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:DataStructures"),"id")
object_ids <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension/structure:LocalRepresentation/structure:Enumeration/Ref"),"id")
object_names <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension"),"id")
list_1 <- list()
for(i in 1:length(object_names)){
name <- object_ids[i]
as <- paste0(paste("//*[@id = '", name, "'", sep = ""),"]")
data <- data.frame(title = xml2::xml_text(xml2::xml_children(xml2::xml_find_all(page,as))),
id = xml2::xml_attr(xml2::xml_children(xml2::xml_find_all(page, as)),"id"))
data <- data |> tidyr::drop_na()
list_1[[i]] <- data
names_data <- paste0(object_names[i])
alt_pos <- stringr::str_locate_all(names_data, "_")[[1]]
alt_pos_first <- alt_pos[1,]
stringr::str_sub(names_data, alt_pos_first[1],alt_pos_first[2]) <- ","
names_data <- gsub(".*,","", names_data)
names(list_1)[i] <- object_names[i]
}
assign(paste0("list_", dataflow), list_1, env = .GlobalEnv)
list_1
}
data_structure("SEEANRG")
#' Get the Data Structure of a Selected Dataflow
#' @description Returns a structure of the selected dataflow.
#' @return
#' @export
#' @details This function will return in a list format which includes all variables (criteria) in selected dataflow. Dataflow ids can be found in data frame that \code{data_flow()} returns.
#' @param dataflow
#' @examples data_structure(dataflow = "DF_UNData_UNFCC")
data_structure <- function(dataflow){
data <- data_flow() |> dplyr::filter(ids == dataflow)
ref_id <- data[1,3]
agency_id <- data[1,4]
url <- paste0("https://data.un.org/ws/rest/datastructure/",agency_id,"/",ref_id,"/?references=children")
page <- xml2::read_xml(url)
codelist <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:DataStructures"),"id")
object_ids <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension/structure:LocalRepresentation/structure:Enumeration/Ref"),"id")
object_names <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension"),"id")
list_1 <- list()
for(i in 1:length(object_names)){
name <- object_ids[i]
as <- paste0(paste("//*[@id = '", name, "'", sep = ""),"]")
data <- data.frame(title = xml2::xml_text(xml2::xml_children(xml2::xml_find_all(page,as))),
id = xml2::xml_attr(xml2::xml_children(xml2::xml_find_all(page, as)),"id"))
data <- data |> tidyr::drop_na()
list_1[[i]] <- data
names(list_1)[i] <- object_names[i]
}
assign(paste0("list_", dataflow), list_1, env = .GlobalEnv)
list_1
}
data_structure("SEEANRG")
View(list_SEEANRG)
list_SEEANRG[[2]]
View(list_SEEANRG[[2]])
View(list_SEEANRG[[2]])
get_data("DF_UNData_UNFCC", filter = list(c("REF_AREA","DEU"),c("INDICATOR", "EN_ATM_METH_XLULUCF")), start = 2010, end = 2015)
get_data("SEEANRG",list(c("REF_AREA","5Z5")))
data_flow()
get_data("DF_UNDATA_SEEA_SUPPLY", filter = list(c("REF_AREA","DE")))
data_structure("DF_UNDATA_SEEA_SUPPLY")
data_structure("DF_UNDATA_SEEA_SUPPLY")
View(list_DF_UNDATA_SEEA_SUPPLY)
data_flow()
#' Get the Data Structure of a Selected Dataflow
#' @description Returns a structure of the selected dataflow.
#' @return
#' @export
#' @details This function will return in a list format which includes all variables (criteria) in selected dataflow. Dataflow ids can be found in data frame that \code{data_flow()} returns.
#' @param dataflow
#' @examples data_structure(dataflow = "DF_UNData_UNFCC")
data_structure <- function(dataflow){
data <- data_flow() |> dplyr::filter(ids == dataflow)
ref_id <- data[1,3]
agency_id <- data[1,4]
url <- paste0("https://data.un.org/ws/rest/datastructure/",agency_id,"/",ref_id,"/?references=children")
page <- xml2::read_xml(url)
codelist <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:DataStructures"),"id")
object_ids <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension/structure:LocalRepresentation/structure:Enumeration/Ref"),"id")
object_names <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension"),"id")
list_1 <- list()
for(i in 1:length(object_names)){
name <- object_ids[i]
as <- paste0(paste("//*[@id = '", name, "'", sep = ""),"]")
data <- data.frame(title = xml2::xml_text(xml2::xml_children(xml2::xml_find_all(page,as))),
id = xml2::xml_attr(xml2::xml_children(xml2::xml_find_all(page, as)),"id"))
data <- data |> tidyr::drop_na()
list_1[[i]] <- data
names(list_1)[i] <- object_names[i]
}
assign(paste0("list_", dataflow), list_1, env = .GlobalEnv)
list_1
}
data_structure("WDI")
data_structure("WBI")
data_flow()
data_structure("DF_UNDATA_WDI")
View(list_DF_UNDATA_SEEA_SUPPLY)
data_flow()
url <- "https://data.un.org/ws/rest/datastructure/WB/WDI/?references=children"
page <- xml2::read_xml(url)
xml2::xml_attr(xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension"),"id")
View(list_DF_UNDATA_WDI)
rm(list = ls())
#' Get the Data Structure of a Selected Dataflow
#' @description Returns a structure of the selected dataflow.
#' @return
#' @export
#' @details This function will return in a list format which includes all variables (criteria) in selected dataflow. Dataflow ids can be found in data frame that \code{data_flow()} returns.
#' @param dataflow
#' @examples data_structure(dataflow = "DF_UNData_UNFCC")
data_structure <- function(dataflow){
data <- data_flow() |> dplyr::filter(ids == dataflow)
ref_id <- data[1,3]
agency_id <- data[1,4]
url <- paste0("https://data.un.org/ws/rest/datastructure/",agency_id,"/",ref_id,"/?references=children")
page <- xml2::read_xml(url)
codelist <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:DataStructures"),"id")
object_ids <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension/structure:LocalRepresentation/structure:Enumeration/Ref"),"id")
object_names <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension"),"id")
list_1 <- list()
for(i in 1:length(object_names)){
name <- object_ids[i]
as <- paste0(paste("//*[@id = '", name, "'", sep = ""),"]")
data <- data.frame(title = xml2::xml_text(xml2::xml_children(xml2::xml_find_all(page,as))),
id = xml2::xml_attr(xml2::xml_children(xml2::xml_find_all(page, as)),"id"))
data <- data |> tidyr::drop_na()
list_1[[i]] <- data
names(list_1)[i] <- object_names[i]
}
assign(paste0("list_", dataflow), list_1, env = .GlobalEnv)
list_1
}
data_flow
data_flow()
data_structure("DF_UNData_UNFCC")
View(list_DF_UNData_UNFCC)
data_structure("DF_UNData_UIS")
View(list_DF_UNData_UIS)
get_data("DF_UNData_UIS", list(c("SEX","F")))
View(list_DF_UNData_UNFCC)
View(list_DF_UNData_UIS)
data_flow()
data_flow()
data_flow()
detach("package:UN", unload = TRUE)
data_structure("UIS_UNData")
data_structure("UIS_UNData")
#' Get Dataflows for United Nations Data and Its Details
#' @description This function will return all dataflows (categories) in UNData database, and its several details in a dataframe.
#' @return
#' @export
#' @details The ids column represents dataflows for each variable.
#' @examples
data_flow <- function(){
url_1 <- "https://data.un.org/ws/rest/dataflow/"
page_1<- xml2::read_xml(url_1)
ids <- xml2::xml_attr(xml2::xml_find_all(page_1, "//structure:Dataflow"),"id")
titles <- xml2::xml_text(xml2::xml_find_all(page_1, "//*[@xml:lang='en']"))
ref_ids <- xml2::xml_attr(xml2::xml_find_all(page_1, "//Ref"),"id")
agency_ids <- xml2::xml_attr(xml2::xml_find_all(page_1, "//Ref"),"agencyID")
titles <- titles[-10]
dataflow <- data.frame(titles, ids, ref_ids, agency_ids)
dataflow
}
#' Get the Data Structure of a Selected Dataflow
#' @description Returns a structure of the selected dataflow.
#' @return
#' @export
#' @details This function will return in a list format which includes all variables (criteria) in selected dataflow. Dataflow ids can be found in data frame that \code{data_flow()} returns.
#' @param dataflow
#' @examples data_structure(dataflow = "DF_UNData_UNFCC")
data_structure <- function(dataflow){
data <- data_flow() |> dplyr::filter(ids == dataflow)
ref_id <- data[1,3]
agency_id <- data[1,4]
url <- paste0("https://data.un.org/ws/rest/datastructure/",agency_id,"/",ref_id,"/?references=children")
page <- xml2::read_xml(url)
codelist <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:DataStructures"),"id")
object_ids <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension/structure:LocalRepresentation/structure:Enumeration/Ref"),"id")
object_names <- xml2::xml_attr(xml2::xml_find_all(page, "//structure:DimensionList/structure:Dimension"),"id")
list_1 <- list()
for(i in 1:length(object_names)){
name <- object_ids[i]
as <- paste0(paste("//*[@id = '", name, "'", sep = ""),"]")
data <- data.frame(title = xml2::xml_text(xml2::xml_children(xml2::xml_find_all(page,as))),
id = xml2::xml_attr(xml2::xml_children(xml2::xml_find_all(page, as)),"id"))
data <- data |> tidyr::drop_na()
list_1[[i]] <- data
names(list_1)[i] <- object_names[i]
}
assign(paste0("list_", dataflow), list_1, env = .GlobalEnv)
list_1
}
#' @return
#' @export
#' @param dataflow
#' @param filter
#' @param start
#' @param end
#' @usage get_data(dataflow, filter, start, end)
#' @details For the filter variable one has to indicate a list which includes vectors that contains the name of variable (criteria) and selected object in this criteria.
#' @examples #To fetch the Environment data for Germany for the indicator of Methane (EN_ATM_METH_XLULUCF) between the years of 2010 and 2015:
#' @examples \code{get_data("DF_UNData_UNFCC", filter = list(c("REF_AREA","DEU"),c("INDICATOR", "EN_ATM_METH_XLULUCF")), start = 2010, end = 2015)}
get_data <- function(dataflow, filter = NULL, start = NULL , end = NULL){
data <- data_structure(dataflow)
list_1 <- list()
for(i in 1:length(data)){
data_1 <- data[[i]]
name_data <- names(data)[i]
for (a in 1:length(filter)) {
filter_1 <- filter[[a]]
id_filter_1 <- intersect(as.vector(data_1[,2]), as.vector(filter_1))
title_filter_1 <- intersect(name_data, as.vector(filter_1))
if(length(id_filter_1)!=0 & length(title_filter_1)!=0){
d <- c(id_filter_1)
break
}else{
d <- NULL
next
}
}
if(!is.null(d)){
list_1[[i]] <- d
}else{
list_1[[i+1]] <- "as"
list_1[[i+1]] <- d
}
}
get_final_data <- rsdmx::readSDMX(providerId = "UNSD", resource = "data", flowRef = as.character(dataflow),
key = list_1, start = start, end = end)
get_final_dataset <- data.frame(get_final_data)
get_final_dataset
}
data_structure("UIS_UNData")
data_structure("UIS_UNData")
data_structure("UIS_UNData")
data_structure("UIS_UNData")
data_flow()
data_structure("DF_UNData_UIS")
View(list_DF_UNData_UIS)
data_flow()
data_structure("NASEC_IDCFINA_A")
View(list_NASEC_IDCFINA_A)
get_data("NASEC_IDCFINA_A", filter = list(c("REF_AREA","DE")))
get_data("NASEC_IDCFINA_A", filter = list(c("REF_AREA","DE"),c("REF_SECTOR","S1")))
get_data("NASEC_IDCFINA_A", filter = list(c("REF_AREA","DE"),c("REF_SECTOR","S1")),start = 2010, end = 2010)
View(get_data("NASEC_IDCFINA_A", filter = list(c("REF_AREA","DE"),c("REF_SECTOR","S1")),start = 2010, end = 2010))
library(UN)
data_flow()
data_structure("DF_SDG_GLH")
View(list_DF_SDG_GLH)
get_data("DF_SDG_GLH", filter = list(c("SEX","M"),c("REF_AREA","3")))
get_data("DF_SDG_GLH", filter = list(c("SEX","M"),c("REF_AREA","9")))
get_data("DF_SDG_GLH", filter = list(c("SEX","M"),c("REF_AREA","9"),c("SERIES","SI_POV_DAY1")))
View(list_DF_SDG_GLH[[3]])
get_data("DF_SDG_GLH", filter = list(c("SEX","M"),c("REF_AREA","9"),c("SERIES","SI_POV_NAHC")))
View(get_data("DF_SDG_GLH", filter = list(c("SEX","M"),c("REF_AREA","9")),start = 2010, end = 2010))
library(UM)
library(UN)
data_flow()
data_structure("DF_UNDATA_ENERGY")
View(list_DF_UNDATA_ENERGY)
data <- UN::data_structure("DF_UNDATA_ENERGY")
data$FREQ
data$REF_AREA
data$COMMODITY
?get_data
get_data("DF_UNData_UNFCC", filter = list(c("REF_AREA","DEU"),c("INDICATOR", "EN_ATM_METH_XLULUCF")), start = 2010, end = 2015)
data_flow()
data_structure("DF_UNData_UIS")
View(list_DF_UNData_UIS)
get_data(dataflow = "DF_UNData_UIS", filter = list(c("REF_AREA","HUN"),c("SEX","F")))
list_DF_UNData_UIS[[2]]
library(devtools)
use_package("rsdmx")
use_package("xml2")
use_package("tidyr")
